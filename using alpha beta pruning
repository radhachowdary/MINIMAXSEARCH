//MINIMAX USING ALPHA-BETA PRUNING 
import math

def minimax(depth, node_index, is_max, scores, height, alpha, beta):
    # Base case: return score if at leaf node level
    if depth == height or node_index >= len(scores):
        return scores[node_index]

    if is_max:
        best = float('-inf')
        for i in range(2):  
            child_index = node_index * 2 + i
            value = minimax(depth + 1, child_index, False, scores, height, alpha, beta)
            best = max(best, value)
            alpha = max(alpha, best)
            if beta <= alpha:  
                break
        return best

    else:
        best = float('inf')
        for i in range(2):  
            child_index = node_index * 2 + i
            value = minimax(depth + 1, child_index, True, scores, height, alpha, beta)
            best = min(best, value)
            beta = min(beta, best)
            if beta <= alpha: 
                break
        return best

def compute_tree1():
    leaf_nodes = [12, 10, 3, 5, 8, 10, 11, 2, 12]  
    height = int(math.log2(len(leaf_nodes)))  
    optimal_value = minimax(0, 0, True, leaf_nodes, height, float('-inf'), float('inf'))
    print("Optimal value for Figure 1:", optimal_value)

def compute_tree2():
    leaf_nodes = [5, -1, 4, 3, -2, -5, 9, 8, 6, 1, -4, 2, 4, 7, 3, -3]  
    height = int(math.log2(len(leaf_nodes))) 
    optimal_value = minimax(0, 0, True, leaf_nodes, height, float('-inf'), float('inf'))
    print("Optimal value for Figure 2:", optimal_value)

if __name__ == "__main__":
    compute_tree1()
    compute_tree2()
