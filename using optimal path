import math
def minimax(depth, node_index, is_max, scores, height):
    # Base case: return score if at leaf node level
    if depth == height or node_index >= len(scores):
        return scores[node_index]
    if is_max:
        return max(
            minimax(depth + 1, node_index * 2, False, scores, height),
            minimax(depth + 1, node_index * 2 + 1, False, scores, height)
        )
    else:
        return min(
            minimax(depth + 1, node_index * 2, True, scores, height),
            minimax(depth + 1, node_index * 2 + 1, True, scores, height)
        )
def compute_tree1():
    leaf_nodes = [12, 10, 3, 5, 8, 10, 11, 2, 12]  
    height = int(math.log2(len(leaf_nodes)))  
    optimal_value = minimax(0, 0, True, leaf_nodes, height)
    print("Optimal value for Figure 1:", optimal_value)

def compute_tree2():
    leaf_nodes = [5, -1, 4, 3, -2, -5, 9, 8, 6, 1, -4, 2, 4, 7, 3, -3]  
    height = int(math.log2(len(leaf_nodes))) 
    optimal_value = minimax(0, 0, True, leaf_nodes, height)
    print("Optimal value for Figure 2:", optimal_value)

if __name__ == "__main__":
    compute_tree1()
    compute_tree2()
